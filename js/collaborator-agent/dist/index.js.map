{"version":3,"sources":["../src/index.ts"],"names":["ConsoleLogger","App","DevtoolsPlugin","SqliteKVStore","createMessageContext","manager","ManagerPrompt","finalizePromptResponse","createMessageRecords","validateEnvironment","logModelConfigs"],"mappings":"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","file":"index.js","sourcesContent":["import { App } from '@microsoft/teams.apps';\r\nimport { DevtoolsPlugin } from '@microsoft/teams.dev';\r\nimport { ManagerPrompt } from './agent/manager';\r\nimport { validateEnvironment, logModelConfigs } from './utils/config';\r\nimport { finalizePromptResponse, createMessageRecords } from './utils/utils';\r\nimport { createMessageContext } from './utils/messageContext';\r\nimport { SqliteKVStore } from './storage/storage';\r\nimport { ConsoleLogger } from '@microsoft/teams.common';\r\n\r\nconst logger = new ConsoleLogger('collaborator', { level: 'debug' });\r\n\r\nconst app = new App({\r\n  plugins: [new DevtoolsPlugin()],\r\n  logger\r\n});\r\n\r\n// Initialize storage\r\nconst storage = new SqliteKVStore();\r\n\r\n// Initialize feedback storage\r\nconst feedbackStorage = storage;\r\n\r\napp.on('message.submit.feedback', async ({ activity, log }) => {\r\n  try {\r\n    const { reaction, feedback: feedbackJson } = activity.value.actionValue;\r\n\r\n    if (activity.replyToId == null) {\r\n      logger.warn(`No replyToId found for messageId ${activity.id}`);\r\n      return;\r\n    }\r\n\r\n    let existingFeedback = feedbackStorage.getFeedbackByMessageId(activity.replyToId);\r\n    if (!existingFeedback) {\r\n      feedbackStorage.initializeFeedbackRecord(activity.replyToId);\r\n    }\r\n\r\n    const success = feedbackStorage.updateFeedback(activity.replyToId, reaction, feedbackJson);\r\n\r\n    if (success) {\r\n      logger.debug(`‚úÖ Successfully recorded feedback for message ${activity.replyToId}`);\r\n    } else {\r\n      logger.warn(`Failed to record feedback for message ${activity.replyToId}`);\r\n    }\r\n\r\n  } catch (error) {\r\n    logger.error(`Error processing feedback: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n  }\r\n});\r\n\r\napp.on('message', async ({ send, activity, api, log }) => {\r\n  \r\n  const botMentioned = activity.entities?.some((e) => e.type === 'mention');\r\n  const context = botMentioned ? await createMessageContext(storage, activity, api) : await createMessageContext(storage, activity);\r\n\r\n  let trackedMessages;\r\n\r\n  if (!activity.conversation.isGroup || botMentioned) { // process request if One-on-One chat or if @mentioned in Groupchat\r\n    await send({ type: 'typing' });\r\n\r\n    const manager = new ManagerPrompt(context, logger.child('Manager'));\r\n    const result = await manager.processRequest();\r\n    const formattedResult = finalizePromptResponse(result.response, context);\r\n\r\n    const sent = await send(formattedResult);\r\n    formattedResult.id = sent.id;\r\n\r\n    trackedMessages = createMessageRecords([activity, formattedResult]);\r\n  } else {\r\n    trackedMessages = createMessageRecords([activity]);\r\n  }\r\n\r\n  log.debug(trackedMessages);\r\n  context.memory.addMessages(trackedMessages);\r\n});\r\n\r\n(async ( ) => {\r\n  const port = +(process.env.PORT || 3978);\r\n  try {\r\n    validateEnvironment(logger);\r\n    logModelConfigs(logger);\r\n  } catch (error) {\r\n    console.error('‚ùå Configuration error:', error);\r\n    process.exit(1);\r\n  }\r\n\r\n  await app.start(port);\r\n\r\n  console.log(`üöÄ Teams Collaborator Bot started on port ${port}`);\r\n})();\r\n"]}