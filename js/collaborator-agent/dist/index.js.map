{"version":3,"sources":["../src/index.ts"],"names":["App","DevtoolsPlugin","getMessageStorage","ManagerPrompt","MockDataManager","createMessageContext","getContextById","handleDebugCommand","addMessageToTracking","finalizePromptResponse","saveMessagesDirectly","removeContextById","validateEnvironment","logModelConfigs"],"mappings":"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","file":"index.js","sourcesContent":["import { App } from '@microsoft/teams.apps';\r\nimport { DevtoolsPlugin } from '@microsoft/teams.dev';\r\nimport { ManagerPrompt } from './agent/manager';\r\nimport { addMessageToTracking, saveMessagesDirectly, getMessageStorage } from './storage/message';\r\nimport { validateEnvironment, logModelConfigs } from './utils/config';\r\nimport { handleDebugCommand } from './utils/debug';\r\nimport { MockDataManager } from './utils/mockData';\r\nimport { finalizePromptResponse } from './utils/utils';\r\nimport { createMessageContext, getContextById, removeContextById } from './utils/messageContext';\r\n\r\nconst app = new App({\r\n  plugins: [new DevtoolsPlugin()],\r\n});\r\n\r\n// Initialize storage and manager (reuse the singleton from message.ts)\r\nconst storage = getMessageStorage();\r\nconst manager = new ManagerPrompt(storage);\r\nconst mockDataManager = new MockDataManager(storage);\r\n\r\n// Initialize feedback storage\r\nconst feedbackStorage = storage;\r\n\r\napp.on('message.submit.feedback', async ({ activity, log }) => {\r\n  try {\r\n    const { reaction, feedback: feedbackJson } = activity.value.actionValue;\r\n\r\n    if (activity.replyToId == null) {\r\n      log.warn(`No replyToId found for messageId ${activity.id}`);\r\n      return;\r\n    }\r\n\r\n    let existingFeedback = feedbackStorage.getFeedbackByMessageId(activity.replyToId);\r\n    if (!existingFeedback) {\r\n      feedbackStorage.initializeFeedbackRecord(activity.replyToId);\r\n    }\r\n\r\n    const success = feedbackStorage.updateFeedback(activity.replyToId, reaction, feedbackJson);\r\n\r\n    if (success) {\r\n      console.log(`✅ Successfully recorded feedback for message ${activity.replyToId}`);\r\n    } else {\r\n      log.warn(`Failed to record feedback for message ${activity.replyToId}`);\r\n    }\r\n\r\n  } catch (error) {\r\n    log.error(`Error processing feedback: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n  }\r\n});\r\n\r\napp.on('message', async ({ send, activity, next }) => {\r\n  const contextID = await createMessageContext(activity);\r\n  const context = getContextById(contextID);\r\n  \r\n  if (!context) {\r\n    console.error('❌ Failed to retrieve context for activity:', activity.id);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const debugResult = await handleDebugCommand(context.text, context.conversationKey);\r\n\r\n    console.log(context.currentDateTime);\r\n    console.log(activity);\r\n    if (debugResult.isDebugCommand) {\r\n      if (debugResult.response) {\r\n        await send({\r\n          type: 'message',\r\n          text: debugResult.response\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    // If this is a personal chat, always route to the manager for full conversational experience\r\n    if (context.isPersonalChat) {\r\n      await send({ type: 'typing' });\r\n\r\n      addMessageToTracking(context.conversationKey, 'user', context.text, activity, context.userName);\r\n\r\n      const result = await manager.processRequest(context);\r\n\r\n      if (result.response) {\r\n        const sentMessageId = await finalizePromptResponse(send, result.response, result.citations);\r\n        feedbackStorage.storeDelegatedCapability(sentMessageId, result.delegatedCapability);\r\n        addMessageToTracking(context.conversationKey, 'assistant', result.response, { id: sentMessageId }, 'AI Assistant');\r\n      } else {\r\n        await send({ type: 'message', text: 'Hello! I can help you with conversation summaries, action item management, and general assistance. What would you like help with?' });\r\n      }\r\n      await saveMessagesDirectly(context.conversationKey);\r\n      return;\r\n    }\r\n\r\n    addMessageToTracking(context.conversationKey, 'user', context.text, activity, context.userName);\r\n\r\n    await saveMessagesDirectly(context.conversationKey);\r\n\r\n    await next();\r\n  } finally {\r\n    // Clean up context after processing\r\n    removeContextById(contextID);\r\n  }\r\n});\r\n\r\napp.on('mention', async ({ send, activity, api }) => {\r\n  await send({ type: 'typing' });\r\n  const contextID = await createMessageContext(activity, api);\r\n  const context = getContextById(contextID);\r\n  \r\n  if (!context) {\r\n    console.error('❌ Failed to retrieve context for activity:', activity.id);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    if (activity.type === 'message' && context.text.trim() !== '') {\r\n      const debugResult = await handleDebugCommand(context.text, context.conversationKey);\r\n      if (debugResult.isDebugCommand) {\r\n        if (debugResult.response) {\r\n          await send({ type: 'message', text: debugResult.response });\r\n        }\r\n        return;\r\n      }\r\n\r\n      const result = await manager.processRequest(context);\r\n\r\n      if (result.response) {\r\n        const sentMessageId = await finalizePromptResponse(send, result.response, result.citations);\r\n\r\n        feedbackStorage.storeDelegatedCapability(sentMessageId, result.delegatedCapability);\r\n\r\n        addMessageToTracking(context.conversationKey, 'assistant', result.response, { id: sentMessageId }, 'AI Assistant');\r\n      } else {\r\n        await send({ type: 'message', text: 'I received your message but I\\'m not sure how to help with that. I can help with conversation summaries and message analysis.' });\r\n      }\r\n      await saveMessagesDirectly(context.conversationKey);\r\n    }\r\n  } finally {\r\n    // Clean up context after processing\r\n    removeContextById(contextID);\r\n  }\r\n});\r\n\r\n(async () => {\r\n  const port = +(process.env.PORT || 3978);\r\n  try {\r\n    validateEnvironment();\r\n    logModelConfigs();\r\n\r\n    // Initialize mock data if needed\r\n    mockDataManager.initializeMockDataIfNeeded();\r\n  } catch (error) {\r\n    console.error('❌ Configuration error:', error);\r\n    process.exit(1);\r\n  }\r\n\r\n  await app.start(port);\r\n\r\n  console.log(`🚀 Teams Collaborator Bot started on port ${port}`);\r\n})();\r\n"]}